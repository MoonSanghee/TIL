n = int(input())
# 수의 범위를 입력받아줍니다.
nums = [True for _ in range(4000000 + 1)]
# 입력받은 수 이하의 소수를 확인할 리스트를 만들어줍니다.
for i in range(2, int(4000000 ** 0.5) + 1):
    # 입력받은 수가 400만 이하이므로 400만의 제곱근 + 1까지의 범위를 순회하며
    if nums[i]:
        # i가 배수가 등장하지 않았다면 i는 소수이므로
        for j in range(i + i, 4000000 + 1, i):
            # 400만 이하의 i의 배수를 전부 소수가 아님을 표시해줍니다.
            nums[j] = False

prime = []
for i in range(2, 4000000 + 1):
    if nums[i]:
        prime.append(i)
# 400만 이하의 소수를 모아 저장해줍니다.

s = 0
e = 0
result = prime[0]
cnt = 0
# 누적합의 범위를 기록할 시작점과 끝점을 변수로 정해주고 
# 누적합에는 범위안의 첫 소수로 지정해주고 합의 결과가 원하는 수가 되는 경우를 저장할 변수를 지정해줍니다.

while s <= e:
    # 시작점이 끝점을 앞지르지 않으면 계속 반복하여줍니다.
    if result > n:
        result -= prime[s]
        s += 1
        # 누적합이 원하는 값을 초과하였으면 누적합 값에 시작점 값을 빼고
        # 시작점을 1 증가시키켜줍니다.
    else:
        if result == n:
            cnt += 1
        # 누적합이 원하는 값이라면 범위를 1가지 찾은것이므로 cnt를 1 증가시켜줍니다.
        e += 1
        if e == len(prime):
            break
        result += prime[e]
        # 누적합이 원하는 값보다 크지 않은 경우이므로 끝점의 인덱스를 한 칸 뒤로 보내고
        # 범위 밖으로 나가면 연산을 멈추고 아니라면 누적합에 갱신된 끝점의 값을 추가하여줍니다.

print(cnt)
# 몇 가지 수의 조합이 원하는 값이 되는지 출력해줍니다.